show variables like 'character%'; 

CREATE INDEX indexName ON mytable(username(length));

主表 
create table classes(         
id int auto_increment primary key,         
name varchar(20) 
); 
从表 
create table student(         
id int auto_increment,         
name varchar(22),         
constraint pk_id primary key(id),         
classes_id int references classes(id) 
);   
alter table users add constraint ck_sex check(sex in('男','女'));
CREATE TABLE `user`( `username` ENUM('zhangs','lis','wangw') DEFAULT 'zhangs'   );

CREATE INDEX indexName ON mytable(username(length));
CREATE UNIQUE INDEX indexName ON mytable(username(length)) 
-- 修改表结构
ALTER mytable ADD UNIQUE [indexName] ON (username(length)) 
-- 创建表的时候直接指定
CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   UNIQUE [indexName] (username(length))   );
CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   PRIMARY KEY(ID)   );

ALTER TABLE mytable ADD INDEX name_city_age (name(10),city,age);[code]
建表时，usernname长度为 16，这里用 10。这是因为一般情况下名字的长度不会超过10，这样会加速索引查询速度，还会减少索引文件的大小，提高INSERT的更新速度。
如果分别在 usernname，city，age上建立单列索引，让该表有3个单列索引，查询时和上述的组合索引效率也会大不一样，远远低于我们的组合索引。虽然此时有了三个索引，但MySQL只能用到其中的那个它认为似乎是最有效率的单列索引。
建立这样的组合索引，其实是相当于分别建立了下面三组组合索引：
usernname,city,age   usernname,city   usernname  为什么没有 city，age这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引，下面的几个SQL就会用到这个组合索引：
[code]
SELECT * FROM mytable WHREE username="admin" AND city="郑州"  SELECT * FROM mytable WHREE username="admin"

而下面几个则不会用到：
复制代码 代码如下:

SELECT * FROM mytable WHREE age=20 AND city="郑州"  SELECT * FROM mytable WHREE city="郑州"